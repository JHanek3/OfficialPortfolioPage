{"version":3,"sources":["Components/ToDoItem.js","todosData.js","Components/ToDoList.js","Components/Header.js","Components/MGComp.js","Components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","defaultChecked","item","completed","onChange","handleChange","id","style","fontStyle","color","textDecoration","text","todosData","List","useState","globalData","setGlobalData","map","todo","itemsData","key","Header","src","alt","MemeGeneratorComp","data","setData","topText","setTopText","bottomText","setBottomText","randomImg","setRandomImg","event","target","name","value","console","log","useEffect","fetch","then","response","json","memes","onSubmit","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","placeholder","MemeGenerator","App","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wOAuBeA,MApBf,SAAkBC,GAOd,OACI,yBAAKC,UAAU,aACX,2BACIC,KAAK,WACLC,eAAgBH,EAAMI,KAAKC,UAC3BC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAElD,uBAAGC,MAAOT,EAAMI,KAAKC,UAbN,CACnBK,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAUqC,MAAOZ,EAAMI,KAAKS,QCWhEC,EA5BG,CACd,CACIN,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,eACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,gBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,qCACNR,WAAW,ICUJU,MA5Bf,WAAiB,IAAD,EACsBC,mBAASF,GAD/B,mBACPG,EADO,KACKC,EADL,KAGd,SAASX,EAAaC,GACpBU,GAAc,SAAAd,GAWZ,OAVqBA,EAAKe,KAAI,SAAAC,GAC5B,OAAIA,EAAKZ,KAAOA,EACP,2BACFY,GADL,IAEEf,WAAYe,EAAKf,YAIde,QAMb,IAAMC,EAAYJ,EAAWE,KAAI,SAAAf,GAAI,OAAI,kBAAC,EAAD,CAAUkB,IAAKlB,EAAKI,GAAIJ,KAAMA,EAAMG,aAAcA,OAG3F,OACE,yBAAKN,UAAU,aACZoB,IChBQE,MAZf,WACI,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,aAER,+CCuDGC,MA7Df,WAA8B,IAAD,EACDV,qBADC,mBAClBW,EADkB,KACZC,EADY,OAEKZ,mBAAS,IAFd,mBAElBa,EAFkB,KAETC,EAFS,OAGWd,mBAAS,IAHpB,mBAGlBe,EAHkB,KAGNC,EAHM,OAIShB,mBAAS,iCAJlB,mBAIlBiB,EAJkB,KAIPC,EAJO,KAezB,SAAS3B,EAAa4B,GAAQ,IAAD,EACHA,EAAMC,OAArBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACA,YAATD,EACAP,EAAWQ,GACK,eAATD,EACPL,EAAcM,GAEdC,QAAQC,IAAI,aAWpB,OA3BAC,qBAAU,WACNC,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASjB,KAAlBmB,MACPlB,EAAQkB,QAEjB,IAqBC,6BACI,0BAAM7C,UAAU,YAAY8C,SATpC,SAAsBZ,GAClBA,EAAMa,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWzB,EAAK0B,QAC1CC,EAAc3B,EAAKsB,GAASM,IAClCrB,EAAaoB,KAML,2BACIpD,KAAK,OACLmC,KAAK,UACLmB,YAAY,WACZlB,MAAOT,EACPvB,SAAUC,IAEd,2BACIL,KAAK,OACLmC,KAAK,aACLmB,YAAY,cACZlB,MAAOP,EACPzB,SAAUC,IAEd,wCAEJ,yBAAKN,UAAU,QACX,yBAAKuB,IAAKS,EAAWR,IAAI,KACzB,wBAAIxB,UAAU,OAAO4B,GACrB,wBAAI5B,UAAU,UAAU8B,MC5CzB0B,MATf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,cCWGC,MAdf,WACE,OACE,6BACE,sTAGA,kBAAC,IAAD,CAAMC,GAAG,SAAT,aAJF,OAIuC,kBAAC,IAAD,CAAMA,GAAG,SAAT,kBAJvC,MAKE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAAQ,kBAAC,EAAD,OAC1B,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAAQ,kBAAC,EAAD,UCHdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.e42c29f2.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../App.css\"\r\n\r\nfunction TodoItem(props) {\r\n    const completedStyle = {\r\n        fontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n\r\n    return(\r\n        <div className=\"todo-item\">\r\n            <input\r\n                type=\"checkbox\"\r\n                defaultChecked={props.item.completed}\r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Walk the dog\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Snap Caroline\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on lastest Netflix series\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, {useState} from \"react\"\r\nimport TodoItem from \"./ToDoItem\"\r\nimport todosData from \"../todosData\"\r\nimport \"../App.css\"\r\n\r\n\r\nfunction List() {\r\n  const [globalData, setGlobalData] = useState(todosData)\r\n\r\n  function handleChange(id) {\r\n    setGlobalData(item => {\r\n      const updatedToDos = item.map(todo => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed\r\n          }\r\n\r\n        } \r\n        return todo\r\n      })\r\n      return updatedToDos\r\n    })\r\n  }\r\n\r\n  const itemsData = globalData.map(item => <TodoItem key={item.id} item={item} handleChange={handleChange}/>)\r\n\r\n\r\n  return(\r\n    <div className=\"todo-list\">\r\n      {itemsData}\r\n    </div>\r\n  )\r\n}\r\nexport default List","import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img\r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useState, useEffect} from \"react\"\r\nimport \"../App.css\"\r\n\r\nfunction MemeGeneratorComp() {\r\n    const [data, setData] = useState()\r\n    const [topText, setTopText] = useState(\"\")\r\n    const [bottomText, setBottomText] = useState(\"\")\r\n    const [randomImg, setRandomImg] = useState(\"http://i.imgflip.com/1bij.jpg\")\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                setData(memes)\r\n            })\r\n    }, [])\r\n\r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n        if (name === \"toptext\") {\r\n            setTopText(value)\r\n        } else if (name === \"bottomtext\") {\r\n            setBottomText(value)\r\n        } else {\r\n            console.log(\"Its broke\")\r\n        }\r\n    }\r\n\r\n    function handleSubmit(event){\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * data.length)\r\n        const randMemeImg = data[randNum].url\r\n        setRandomImg(randMemeImg)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\" \r\n                    name=\"toptext\"\r\n                    placeholder=\"Top Text\"\r\n                    value={topText}\r\n                    onChange={handleChange}\r\n                />\r\n                <input\r\n                    type=\"text\" \r\n                    name=\"bottomtext\"\r\n                    placeholder=\"Bottom Text\"\r\n                    value={bottomText}\r\n                    onChange={handleChange}\r\n                />\r\n                <button>Gen</button>\r\n            </form>\r\n            <div className=\"meme\">\r\n                <img src={randomImg} alt=\"\"/>\r\n                <h2 className=\"top\">{topText}</h2>\r\n                <h2 className=\"bottom\">{bottomText}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeGeneratorComp","import React  from \"react\"\r\nimport Header from \"./Header\"\r\nimport MemeGeneratorComp from \"./MGComp\"\r\nimport \"../App.css\"\r\n\r\nfunction MemeGenerator() {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <MemeGeneratorComp/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\nimport \"./App.css\"\nimport List from \"./Components/ToDoList\"\nimport MemeGenerator from \"./Components/MemeGenerator\"\nimport {Link, Switch, Route} from \"react-router-dom\"\n\nfunction App() {\n  return(\n    <div>\n      <p>This is the project staging area, I haven't completly figured out how to anchor link a pure html file to work with a react app's Switch and Router hooks. It's probably just easier to make\n        this whole landing page into a react app, but that'll be after I finish some more projects.\n      </p>\n      <Link to=\"/List\">ToDo List</Link> || <Link to=\"/Meme\">Meme Generator</Link> || \n      <Switch>\n        <Route exact path=\"/List\"><List/></Route>\n        <Route exact path=\"/Meme\"><MemeGenerator/></Route>\n      </Switch>\n    </div>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\"\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}